<?php
require_once('functions-edit.php');

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Plans extends BasePlans
{
    public function setUp()
    {
        $this->hasMutator('edit_text', 'processText');
        $this->hasOne('Accounts as Account', array('local' => 'user_id', 'foreign' => 'userid'));
    }

    public function save(Doctrine_Connection $conn = null)
    {
      $conn = $conn ? $conn : $this->getTable()->getConnection();
      $conn->beginTransaction();
      try
      {
        $ret = parent::save($conn);
        $conn->commit();
        return $ret;
      }
      catch (Exception $e)
      {
         $conn->rollBack();
         throw $e;
      }
    }

    public function processText($text) {
        $text = $this->processDates($text);
        $this->_set('edit_text', $text);
        $planloves = array();
        $html_text = cleanText($text, $planloves);
        $this->_set('plan', $html_text);
        Doctrine_Query::create()->delete('Planlove p')->where('p.lover_id = ?', $this->user_id)->execute();
        // cleanText will return multiple copies of a username if different capitalizations are used 
        // on a plan. Make sure we don't try to add a row twice.
        $done = array();
        foreach ($planloves as $planlove) {
           $lovee = Doctrine_Query::create()->select('a.userid')->from('Accounts a')->where('a.username = ?', $planlove)->fetchOne();
           if (!in_array($lovee->userid,$done)) {
               $love = new Planlove();
               $love->Lover = $this->Account;
               $love->Lovee = $lovee;
               $love->save();
               $done[] = $lovee->userid;
           }
        }
    }

    protected function processDates($text) {
        $search = array('[date]', '[dnew]');
        $replace = array();
        $replace[] = '<b>' . date('l F j, Y. g:i A') . '</b>';
        $replace[] = '<b>' . date('F j, Y, l H:i') . '</b>';
        $text = str_replace($search, $replace, $text);
        return $text;
    }

}
